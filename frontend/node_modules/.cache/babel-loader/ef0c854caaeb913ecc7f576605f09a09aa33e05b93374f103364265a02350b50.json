{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Liste des articles 1\", -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_3]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/Users/aanaouiothmane/Desktop/ImmoTestApp/frontend/src/components/ArticleList.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>Liste des articles 1</h2>\n  \n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport $ from \"jquery\"; // Import jQuery\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Import Bootstrap CSS\nimport \"datatables.net-bs5/css/dataTables.bootstrap5.min.css\"; // Import DataTables Bootstrap 5 styling\nimport \"datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css\"; // Import DataTables Buttons Bootstrap 5 styling\nimport \"datatables.net\"; // Import DataTables library\nimport \"datatables.net-buttons\"; // Import DataTables Buttons extension\n\nexport default {\n  data() {\n    return {\n      articles: [],\n      dataTable: null,\n    };\n  },\n  mounted() {\n    this.initializeDataTable();\n    this.loadArticles();\n  },\n  methods: {\n    initializeDataTable() {\n      this.dataTable = $(this.$el)\n        .find(\".table\")\n        .DataTable({\n          orderCellsTop: true,\n          dom: \"Bfrtip\",\n          order: [\n            [0, \"asc\"],\n            [1, \"asc\"],\n          ],\n\n          responsive: true,\n          animate: true,\n          paging: true,\n          lengthChange: true,\n          searching: true,\n          ordering: true,\n          info: true,\n          autoWidth: true,\n          processing: true,\n          columnFilter: true,\n          fixedColumns: true,\n          language: {\n            processing: \"Traitement en cours...\",\n            search: \"Rechercher&nbsp;:\",\n            lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n            info: \"Affichage de l'&eacute;l&eacute;ment _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n            infoEmpty:\n              \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n            infoFiltered:\n              \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n            infoPostFix: \"\",\n            loadingRecords: \"Chargement en cours...\",\n            zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n            emptyTable: \"Aucune donnée disponible dans le tableau\",\n            paginate: {\n              first: \"Premier\",\n              previous: \"Pr&eacute;c&eacute;dent\",\n              next: \"Suivant\",\n              last: \"Dernier\",\n            },\n            aria: {\n              sortAscending:\n                \": activer pour trier la colonne par ordre croissant\",\n              sortDescending:\n                \": activer pour trier la colonne par ordre décroissant\",\n            },\n          },\n        });\n    },\n    async loadArticles() {\n      try {\n        const response = await axios.get(\"http://localhost:8000/api/articles\");\n        this.articles = response.data;\n\n        // Destroy existing DataTable instance if it exists\n        if (this.dataTable) {\n          this.dataTable.destroy();\n        }\n\n        // Reinitialize DataTables with fetched data\n        this.$nextTick(() => {\n          this.dataTable = $(this.$el)\n            .find(\"table\")\n            .DataTable({\n              data: this.articles,\n              columns: [\n                { data: \"title\" },\n                {\n                  data: null,\n                  render: function (data, type, row) {\n                    return `\n\n                      <button class=\"btn btn-sm btn-danger\" data-article-id=\"${row.id}\" data-action=\"delete\"><i class=\"fas fa-remove\"></i></button>\n                    `;\n                  },\n                },\n              ],\n\n              language: {\n                processing: \"Traitement en cours...\",\n                search: \"Rechercher&nbsp;:\",\n                lengthMenu: \"Afficher _MENU_ &eacute;l&eacute;ments\",\n                info: \"Affichage de l'&eacute;l&eacute;ment _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments\",\n                infoEmpty:\n                  \"Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments\",\n                infoFiltered:\n                  \"(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)\",\n                infoPostFix: \"\",\n                loadingRecords: \"Chargement en cours...\",\n                zeroRecords: \"Aucun &eacute;l&eacute;ment &agrave; afficher\",\n                emptyTable: \"Aucune donnée disponible dans le tableau\",\n                paginate: {\n                  first: \"Premier\",\n                  previous: \"Pr&eacute;c&eacute;dent\",\n                  next: \"Suivant\",\n                  last: \"Dernier\",\n                },\n                aria: {\n                  sortAscending:\n                    \": activer pour trier la colonne par ordre croissant\",\n                  sortDescending:\n                    \": activer pour trier la colonne par ordre décroissant\",\n                },\n              },\n            });\n\n          $(this.$el)\n            .find(\"button[data-action='edit']\")\n            .click(this.handleEditButtonClick);\n          $(this.$el)\n            .find(\"button[data-action='delete']\")\n            .click(this.handleDeleteButtonClick);\n        });\n      } catch (error) {\n        console.error(\"Error loading articles:\", error);\n      }\n    },\n    handleEditButtonClick(event) {\n      const articleId = $(event.currentTarget).data(\"article-id\");\n      this.editArticle(articleId);\n    },\n    handleDeleteButtonClick(event) {\n      const articleId = $(event.currentTarget).data(\"article-id\");\n      this.deleteArticle(articleId);\n    },\n    editArticle(articleId) {\n      console.log(\"Editing article with ID:\", articleId);\n    },\n    async deleteArticle(articleId) {\n      try {\n        await axios.delete(`../api/articles/${articleId}`);\n        console.log(\"Article deleted successfully:\", articleId);\n        this.loadArticles(); // Reload articles after deletion\n      } catch (error) {\n        console.error(\"Error deleting article:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;gCACpBC,mBAAA,CAA6B,YAAzB,sBAAoB;oBAAxBC,UAA6B,C;;uBAD/BC,mBAAA,CAGM,OAHNC,UAGM,EAJR,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}